# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-03-04 05:48
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django_markdown.models
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('djsend', '0003_auto_20160304_0048'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
                ('keycode', models.IntegerField(help_text='The character keycode representing the correct response for this category. See: http://www.cambiaresearch.com/articles/15/javascript-key-codes')),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djsend.SimCatGlobalSetting')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='GenericSingleStimuli',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.PositiveIntegerField()),
                ('name', models.CharField(help_text='A simple name for this particular stimuli pair', max_length=26)),
                ('index', models.PositiveSmallIntegerField(blank=True, help_text='Youn can give a number to indicate the order among the pairs that point to the same block. They will be given in asceding order.', null=True)),
                ('stimulus', models.CharField(help_text='The path to your stimuli file inside the static files folder we provided. Or it can be a short HTML string', max_length=256)),
                ('block_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenericStimuliPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.PositiveIntegerField()),
                ('name', models.CharField(help_text='A simple name for this particular stimuli pair', max_length=26)),
                ('index', models.PositiveSmallIntegerField(blank=True, help_text='Youn can give a number to indicate the order among the pairs that point to the same block. They will be given in asceding order.', null=True)),
                ('stimulus', models.CharField(help_text='The path to your stimuli file inside the static files folder we provided. Or it can be a short HTML string', max_length=256)),
                ('second_stim', models.CharField(help_text='The path to your stimuli file inside the static files folder we provided. Or it can be a short HTML string', max_length=256)),
                ('block_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MicroComponentPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField()),
                ('first', models.CharField(max_length=16)),
                ('second', models.CharField(max_length=16)),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djsend.SimCatGlobalSetting')),
            ],
        ),
        migrations.CreateModel(
            name='TextTrial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('global_settings_id', models.PositiveIntegerField(help_text='Which configuration object among your configs of the above type is this block attached to?')),
                ('name', models.CharField(help_text='A short name to describe this block', max_length=24)),
                ('position_in_timeline', models.PositiveSmallIntegerField(blank=True, help_text='This number is used by the global setting this object is part of to build its timeline. It represents the ordinal position in which this block should come.', null=True)),
                ('reprise', models.PositiveSmallIntegerField(blank=True, help_text="If set, indicates that this block is a reprise of the n'th block, where n is the value of the field", null=True)),
                ('length', models.PositiveIntegerField(blank=True, help_text="How many individual trials of this type should there be. You can leave blank if you don't need it", null=True)),
                ('type', models.CharField(help_text="This will be passed as the 'type' parameter to jsPsych. It tells it which plugin to use to render these trials.", max_length=26)),
                ('is_practice', models.BooleanField()),
                ('extra_params', jsonfield.fields.JSONField(blank=True, null=True)),
                ('text', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.')),
                ('text_en', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.', null=True)),
                ('text_fr', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.', null=True)),
                ('text_es', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.', null=True)),
                ('cont_btn', models.CharField(blank=True, help_text='The ID of a clickable element in the <form> you just created. When the element is clicked, the trial will advance.', max_length=24, null=True)),
                ('global_settings_type', models.ForeignKey(help_text='What kind of global configuration is this object part of?', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('save_with', models.ForeignKey(help_text="Choose the data model that will be used to save all trials that have their 'type' parameter equal to what you wrote above.     If You have different block-setting objects (like this one) that have the same 'type' but different 'save_with', then there is no guarantee which data-model will be used. This is because I think there is no real reason why two different 'categorization' blocks should be saved with different data-models: even if they have wildly different stimuli or timing settings, they should return the same kind of data.", on_delete=django.db.models.deletion.CASCADE, related_name='created_texttrials', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterIndexTogether(
            name='texttrial',
            index_together=set([('global_settings_type', 'global_settings_id')]),
        ),
    ]
