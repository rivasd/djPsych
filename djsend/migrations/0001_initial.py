# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-03-03 18:30
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django_markdown.models
import gfklookupwidget.fields
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('djexperiments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategorizationBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('global_settings_id', gfklookupwidget.fields.GfkLookupField(help_text='Which configuration object among your configs of the above type is this block attached to?')),
                ('position_in_timeline', models.PositiveSmallIntegerField(blank=True, help_text='This number is used by the global setting this object is part of to build its timeline. It represents the ordinal position in which this block should come.', null=True)),
                ('reprise', models.PositiveSmallIntegerField(blank=True, help_text="If set, indicates that this block is a reprise of the n'th block, where n is the value of the field", null=True)),
                ('length', models.PositiveIntegerField(blank=True, help_text="How many individual trials of this type should there be. You can leave blank if you don't need it", null=True)),
                ('type', models.CharField(help_text="This will be passed as the 'type' parameter to jsPsych. It tells it which plugin to use to render these trials.", max_length=26)),
                ('is_practice', models.BooleanField()),
                ('extra_params', jsonfield.fields.JSONField(blank=True, null=True)),
                ('show_stim_with_feedback', models.BooleanField(default=False, help_text='Should the stimulus be shown together with the feedback text?')),
                ('show_feedback_on_timeout', models.BooleanField(default=False, help_text='Should we show the feedback even when the trial times out?')),
                ('timing_stim', models.IntegerField(help_text='How long to show the stimulus for (milliseconds). If -1, then the stimulus is shown until a response is given.')),
                ('timing_feedback_duration', models.IntegerField(help_text='How long to show the feedback for ')),
                ('timing_response', models.IntegerField(help_text='The maximum time allowed for a response. If -1, then the experiment will wait indefinitely for a response.')),
                ('timing_post_trial', models.IntegerField(help_text='Sets the time, in milliseconds, between the current trial and the next trial.')),
                ('global_settings_type', models.ForeignKey(help_text='What kind of global configuration is this object part of?', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('save_with', models.ForeignKey(help_text="Choose the data model that will be used to save all trials that have their 'type' parameter equal to what you wrote above.     If You have different block-setting objects (like this one) that have the same 'type' but different 'save_with', then there is no guarantee which data-model will be used. This is because I think there is no real reason why two different 'categorization' blocks should be saved with different data-models: even if they have wildly different stimuli or timing settings, they should return the same kind of data.", on_delete=django.db.models.deletion.CASCADE, related_name='created_categorizationblocks', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Experimental block basic configuration',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
                ('keycode', models.IntegerField(help_text='The character keycode representing the correct response for this category. See: http://www.cambiaresearch.com/articles/15/javascript-key-codes')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='GenericGlobalSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="An identifier for this set of settings, for example 'production' or 'test settings' ", max_length=20)),
                ('max_consecutive_timeouts', models.IntegerField(blank=True, help_text='The experiment will automatically abort if this number if the subject does not respond fast enough to this many consecutive trials', null=True)),
                ('max_total_timeouts', models.IntegerField(blank=True, help_text='The experiment will automatically abort if this many trials are allowed to timeout in total', null=True)),
                ('fixation_cross', models.CharField(blank=True, help_text='The path to fixation cross image, will be appended to static/your_app_name/', max_length=32, null=True)),
                ('extra_parameters', jsonfield.fields.JSONField(blank=True, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djexperiments.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenericSettingBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('global_settings_id', gfklookupwidget.fields.GfkLookupField(help_text='Which configuration object among your configs of the above type is this block attached to?')),
                ('position_in_timeline', models.PositiveSmallIntegerField(blank=True, help_text='This number is used by the global setting this object is part of to build its timeline. It represents the ordinal position in which this block should come.', null=True)),
                ('reprise', models.PositiveSmallIntegerField(blank=True, help_text="If set, indicates that this block is a reprise of the n'th block, where n is the value of the field", null=True)),
                ('length', models.PositiveIntegerField(blank=True, help_text="How many individual trials of this type should there be. You can leave blank if you don't need it", null=True)),
                ('type', models.CharField(help_text="This will be passed as the 'type' parameter to jsPsych. It tells it which plugin to use to render these trials.", max_length=26)),
                ('is_practice', models.BooleanField()),
                ('extra_params', jsonfield.fields.JSONField(blank=True, null=True)),
                ('global_settings_type', models.ForeignKey(help_text='What kind of global configuration is this object part of?', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('save_with', models.ForeignKey(help_text="Choose the data model that will be used to save all trials that have their 'type' parameter equal to what you wrote above.     If You have different block-setting objects (like this one) that have the same 'type' but different 'save_with', then there is no guarantee which data-model will be used. This is because I think there is no real reason why two different 'categorization' blocks should be saved with different data-models: even if they have wildly different stimuli or timing settings, they should return the same kind of data.", on_delete=django.db.models.deletion.CASCADE, related_name='created_genericsettingblocks', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Experimental block basic configuration',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenericSingleStimuli',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.PositiveIntegerField()),
                ('name', models.CharField(help_text='A simple name for this particular stimuli pair', max_length=26)),
                ('index', models.PositiveSmallIntegerField(blank=True, help_text='Youn can give a number to indicate the order among the pairs that point to the same block. They will be given in asceding order.', null=True)),
                ('stimulus', models.CharField(help_text='The path to your stimuli file inside the static files folder we provided. Or it can be a short HTML string', max_length=256)),
                ('block_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenericStimuliPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.PositiveIntegerField()),
                ('name', models.CharField(help_text='A simple name for this particular stimuli pair', max_length=26)),
                ('index', models.PositiveSmallIntegerField(blank=True, help_text='Youn can give a number to indicate the order among the pairs that point to the same block. They will be given in asceding order.', null=True)),
                ('stimulus', models.CharField(help_text='The path to your stimuli file inside the static files folder we provided. Or it can be a short HTML string', max_length=256)),
                ('second_stim', models.CharField(help_text='The path to your stimuli file inside the static files folder we provided. Or it can be a short HTML string', max_length=256)),
                ('block_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('text', django_markdown.models.MarkdownField(help_text='Write your instruction page here using Markdown syntax! see: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet')),
                ('text_en', django_markdown.models.MarkdownField(help_text='Write your instruction page here using Markdown syntax! see: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet', null=True)),
                ('text_fr', django_markdown.models.MarkdownField(help_text='Write your instruction page here using Markdown syntax! see: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet', null=True)),
                ('text_es', django_markdown.models.MarkdownField(help_text='Write your instruction page here using Markdown syntax! see: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet', null=True)),
                ('order', models.PositiveIntegerField(help_text='if a setting has multiple instruction pages, we use this number to sort the order in which you want them presented.')),
                ('after', models.BooleanField(help_text='check if this instruction page is meant to be shown AFTER the task it is attached to.')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='MicroComponentPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField()),
                ('first', models.CharField(max_length=16)),
                ('second', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='SimCatGlobalSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="An identifier for this set of settings, for example 'production' or 'test settings' ", max_length=20)),
                ('max_consecutive_timeouts', models.IntegerField(blank=True, help_text='The experiment will automatically abort if this number if the subject does not respond fast enough to this many consecutive trials', null=True)),
                ('max_total_timeouts', models.IntegerField(blank=True, help_text='The experiment will automatically abort if this many trials are allowed to timeout in total', null=True)),
                ('fixation_cross', models.CharField(blank=True, help_text='The path to fixation cross image, will be appended to static/your_app_name/', max_length=32, null=True)),
                ('extra_parameters', jsonfield.fields.JSONField(blank=True, null=True)),
                ('sample_table_height', models.IntegerField(help_text='In the table of sample stimuli shown at the beginning, how many images hight should the table be.')),
                ('sample_table_width', models.IntegerField(help_text='In the table of sample stimuli shown at the beginning, how many images across should the table be.')),
                ('levels', models.IntegerField(help_text='Starting from the easiest difficulty (all microcomponents are invariants), how many difficulty levels should be allowed? (the final difficulty will be chosen at random among the allowed levels)')),
                ('density', models.IntegerField(help_text='how many micro components should fit along the height and width of the finished stimulus, controls how dense is the stimulus')),
                ('size', models.PositiveIntegerField(help_text='The size of the square stimuli in pixels (length of its sides)')),
                ('number_of_pauses', models.PositiveSmallIntegerField(default=0, help_text='how many pauses with questionnaire should we insert')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djexperiments.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SimilarityBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('global_settings_id', gfklookupwidget.fields.GfkLookupField(help_text='Which configuration object among your configs of the above type is this block attached to?')),
                ('position_in_timeline', models.PositiveSmallIntegerField(blank=True, help_text='This number is used by the global setting this object is part of to build its timeline. It represents the ordinal position in which this block should come.', null=True)),
                ('reprise', models.PositiveSmallIntegerField(blank=True, help_text="If set, indicates that this block is a reprise of the n'th block, where n is the value of the field", null=True)),
                ('length', models.PositiveIntegerField(blank=True, help_text="How many individual trials of this type should there be. You can leave blank if you don't need it", null=True)),
                ('type', models.CharField(help_text="This will be passed as the 'type' parameter to jsPsych. It tells it which plugin to use to render these trials.", max_length=26)),
                ('is_practice', models.BooleanField()),
                ('extra_params', jsonfield.fields.JSONField(blank=True, null=True)),
                ('intervals', models.IntegerField(help_text='How many different choices are available on the slider. For example, 5 will limit the options to 5 different places on the slider')),
                ('show_ticks', models.BooleanField(help_text='If true, then the slider will have tick marks indicating where the response options lie on the slider.')),
                ('show_response', models.CharField(choices=[('FIRST_STIMULUS', 'With the first stimulus'), ('SECOND_STIMULUS', 'With the second stimulus'), ('POST_STIMULUS', 'After both stimuli have disappeared')], help_text='When should the response slider be shown?', max_length=16)),
                ('timing_first_stim', models.IntegerField(help_text='How long to show the first stimulus for in milliseconds.')),
                ('timing_second_stim', models.IntegerField(help_text='How long to show the second stimulus for in milliseconds. -1 will show the stimulus until a response is made by the subject.')),
                ('timing_image_gap', models.IntegerField(help_text='How long to show a blank screen in between the two stimuli.')),
                ('timing_post_trial', models.IntegerField(help_text='Sets the time, in milliseconds, between the current trial and the next trial.')),
                ('prompt', models.CharField(blank=True, help_text='Any content here will be displayed below the stimulus, as a reminder to the participant', max_length=32)),
                ('global_settings_type', models.ForeignKey(help_text='What kind of global configuration is this object part of?', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('save_with', models.ForeignKey(help_text="Choose the data model that will be used to save all trials that have their 'type' parameter equal to what you wrote above.     If You have different block-setting objects (like this one) that have the same 'type' but different 'save_with', then there is no guarantee which data-model will be used. This is because I think there is no real reason why two different 'categorization' blocks should be saved with different data-models: even if they have wildly different stimuli or timing settings, they should return the same kind of data.", on_delete=django.db.models.deletion.CASCADE, related_name='created_similarityblocks', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Experimental block basic configuration',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TextTrial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('global_settings_id', gfklookupwidget.fields.GfkLookupField(help_text='Which configuration object among your configs of the above type is this block attached to?')),
                ('position_in_timeline', models.PositiveSmallIntegerField(blank=True, help_text='This number is used by the global setting this object is part of to build its timeline. It represents the ordinal position in which this block should come.', null=True)),
                ('reprise', models.PositiveSmallIntegerField(blank=True, help_text="If set, indicates that this block is a reprise of the n'th block, where n is the value of the field", null=True)),
                ('length', models.PositiveIntegerField(blank=True, help_text="How many individual trials of this type should there be. You can leave blank if you don't need it", null=True)),
                ('type', models.CharField(help_text="This will be passed as the 'type' parameter to jsPsych. It tells it which plugin to use to render these trials.", max_length=26)),
                ('is_practice', models.BooleanField()),
                ('extra_params', jsonfield.fields.JSONField(blank=True, null=True)),
                ('text', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.')),
                ('text_en', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.', null=True)),
                ('text_fr', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.', null=True)),
                ('text_es', django_markdown.models.MarkdownField(help_text='path to your html file inside your experiment directory, probably just its name and extension.', null=True)),
                ('cont_btn', models.CharField(blank=True, help_text='The ID of a clickable element in the <form> you just created. When the element is clicked, the trial will advance.', max_length=24, null=True)),
                ('global_settings_type', models.ForeignKey(help_text='What kind of global configuration is this object part of?', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('save_with', models.ForeignKey(help_text="Choose the data model that will be used to save all trials that have their 'type' parameter equal to what you wrote above.     If You have different block-setting objects (like this one) that have the same 'type' but different 'save_with', then there is no guarantee which data-model will be used. This is because I think there is no real reason why two different 'categorization' blocks should be saved with different data-models: even if they have wildly different stimuli or timing settings, they should return the same kind of data.", on_delete=django.db.models.deletion.CASCADE, related_name='created_texttrials', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Experimental block basic configuration',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='microcomponentpair',
            name='setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djsend.SimCatGlobalSetting'),
        ),
        migrations.AddField(
            model_name='category',
            name='setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djsend.SimCatGlobalSetting'),
        ),
        migrations.AlterIndexTogether(
            name='texttrial',
            index_together=set([('global_settings_type', 'global_settings_id')]),
        ),
        migrations.AlterIndexTogether(
            name='similarityblock',
            index_together=set([('global_settings_type', 'global_settings_id')]),
        ),
        migrations.AlterIndexTogether(
            name='genericsettingblock',
            index_together=set([('global_settings_type', 'global_settings_id')]),
        ),
        migrations.AlterIndexTogether(
            name='categorizationblock',
            index_together=set([('global_settings_type', 'global_settings_id')]),
        ),
    ]
